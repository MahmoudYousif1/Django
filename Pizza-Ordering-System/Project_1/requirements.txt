SETTING UP A DJANGO PROJECT
python3 -m django startproject name

CREATING AN APP
python3 manage.py startapp name

CREATING A SUPERUSER
python3 manage.py createsuperuser 

DELETING A DATABASE COMPLETELY
python3 manage.py flush

MANAGING MIGRATIONS
python3 manage.py makemigrations 
python3 mange.py migrate


models.py:
from django.db import models

# Create your models here.
class Color(models.Model):
    id = models.AutoField(primary_key=True)
    color = models.TextField(default="")

    def __str__(self):
        return self.color

class Type(models.Model):
    id = models.AutoField(primary_key=True)
    type = models.TextField(default="")

    def __str__(self):
        return self.type

class Item(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)
    description = models.CharField(max_length=200)

    SIZES = [
        ('XS', 'XS'),
        ('S', 'S'),
        ('M', 'M'),
        ('L', 'L'),
        ('XL', 'XL'),
    ]
    size = models.CharField(max_length=2, choices=SIZES, default="")

    type = models.ForeignKey(Type, on_delete=models.CASCADE)
    color = models.ForeignKey(Color, on_delete=models.CASCADE)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.IntegerField(default=1)

    def __str__(self):
        space = ', '
        return self.name +space+ self.description +space+ self.size +space+ str(self.type) +space+ str(self.color) +space+ str(self.price) +space+ str(self.quantity)
    


forms:
from django import forms
from django.forms import ModelChoiceField, Select, CheckboxInput
from django.db import transaction
from .models import *

class ItemForm(forms.ModelForm):
    class Meta:
        model = Item
        fields = ['name', 'description', 'size', 'type', 'color', 'price', 'quantity']

    widgets = {
            'name': CheckboxInput(attrs={
                'class': 'form-control',
                'style': 'max_width: 300px',
                'placeholder': 'Name',
            }),

            'description': CheckboxInput(attrs={
                'class': 'form-control',
                'style': 'max_width: 300px',
                'placeholder': 'Description',
            }),

            'size': Select(attrs={
                'class': 'form-control',
                'style': 'max_width: 300px',
                'placeholder': 'Size',
            }),

            'type': Select(attrs={
                'class': 'form-control',
                'style': 'max_width: 300px',
                'placeholder': 'Type',
            }),

            'color': Select(attrs={
                'class': 'form-check-input',
                'style': 'max_width: 300px',
                'placeholder': 'Color',
            }),

            'price': CheckboxInput(attrs={
                'class': 'form-check-input',
                'style': 'max_width: 300px',
                'placeholder': 'Price',
            }),

            'quantity': CheckboxInput(attrs={
                'class': 'form-check-input',
                'style': 'max_width: 300px',
                'placeholder': 'Quantity',
            }),
        }


    def clean(self):
        data = self.cleaned_data
        name = data['name']
        description = data['description']
        size = data['size']
        type = data['type']
        color = data['color']
        price = data['price']
        quantity = data['quantity']

        if name == "":
            raise forms.ValidationError("Name was left blank!")

        if description == "":
            raise forms.ValidationError("Description was left blank!")

        if size == None:
            raise forms.ValidationError("Size was left blank!")

        if type == None:
            raise forms.ValidationError("Type was left blank!")

        if color == None:
            raise forms.ValidationError("Color was left blank!")

        if price == None:
            raise forms.ValidationError("Price was left blank!")

        if quantity == None:
            raise forms.ValidationError("Quantity was left blank!")

        return data



urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='homepage'), 
    path('homepage', views.index, name='homepage'),
    path('items', views.view_all_items, name='all_items'),
    path('items/single_item/<int:itemid>', views.view_single_item, name='single_item'),
    path('items/by_size/<str:itemsize>', views.view_by_size, name='by_size'),
    path('createitem', views.create_item, name='create_item'),
]


views.py:

from django.shortcuts import render, get_object_or_404
from .models import *
from .forms import *

# Create your views here.
def index(request):
    return render(request, 'index.html')

def view_all_items(request):
    all_items = Item.objects.all()
    return render(request, 'all_items.html', {'items': all_items})

def view_single_item(request, itemid):
    single_item = get_object_or_404(Item, id=itemid)
    return render(request, 'single_item.html', {'item': single_item})

def view_by_size(request, itemsize):
    by_size = Item.objects.filter(size=itemsize)
    return render(request, 'by_size.html', {'items': by_size})

def create_item(request):
    if request.method == "POST":
        form = ItemForm(request.POST)
        if form.is_valid():
            item = form.save()
            return render(request, 'item_created.html', {'item': item})
        else:
            return render(request, 'create_item.html', {'form':form})
    else:
        form = ItemForm()
        return render(request, 'create_item.html', {'form':form})


templates

/* base.html:*/
<html>
<head>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
</head>
<body>

    <style>
    .navbar-nav {
        flex-grow: 0.05;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 2rem;
        color: white;
        background-color: black;
        width: 100%;
        text-transform: uppercase;
        line-height: 3rem;
          }

    </style>

    <div class="navbar-nav"> 
        <a class="nav-link active" href="{% url 'index' %}">Home</a>
        <a class="nav-link active" href="{% url 'items' %}">All-items</a>
        <a class="nav-link active" href="{% url 'create' %}">Create</a>
    </div>

    {% block content %}
    {% endblock %}
</body>

<script
src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct"
crossorigin="anonymous"
></script>
</html>



{% extends 'base.html' %}

{% block content %}
    {% for item in items %}
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <b>{{ item.name }}</b>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Description: {{ item.description }}</li>
                <li class="list-group-item">Size: {{ item.size }}</li>
                <li class="list-group-item">Type: {{ item.type }}</li>
                <li class="list-group-item">Color: {{ item.color }}</li>
                <li class="list-group-item">Price: {{ item.price }}</li>
                <li class="list-group-item">Quantity: {{ item.quantity }}</li>
                <li class="list-group-item"><a href="items/single_item/{{ item.id }}">View item</a></li>
            </ul>
        </div>
        <br>

    {% endfor %}
{% endblock %}



by_size.html:

{% extends 'base.html' %}

{% block content %}
    {% for item in items %}
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <b>{{ item.name }}</b>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Description: {{ item.description }}</li>
                <li class="list-group-item">Size: {{ item.size }}</li>
                <li class="list-group-item">Type: {{ item.type }}</li>
                <li class="list-group-item">Color: {{ item.color }}</li>
                <li class="list-group-item">Price: {{ item.price }}</li>
                <li class="list-group-item">Quantity: {{ item.quantity }}</li>
                <li class="list-group-item"><a href="items/single_item/{{ item.id }}">View item</a></li>
            </ul>
        </div>
        <br>

    {% endfor %}
{% endblock %}


create_item.html:

{% extends 'base.html' %}

{% block content %}
    <div class="row">
        <div class="mx-auto col-10 col-md-8 col-lg-4">
            <h5 class="display-5">Add a new item here:</h5>
            <form action="" method="POST">
                {% csrf_token %}
                <div class="form-group">
                    {{ form.as_p }}
                </div>

                <br>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">
                        Create
                    </button>
                </div>
            </form>
        </div>
    </div>
{% endblock %}


item_created.html:

{% extends 'base.html' %}

{% block content %}
    <h5 class="display-5">You have created:</h5>
    <div class="card" style="width: 18rem;">
        <div class="card-header">
            <b>{{ item.name }}</b>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Description: {{ item.description }}</li>
            <li class="list-group-item">Size: {{ item.size }}</li>
            <li class="list-group-item">Type: {{ item.type }}</li>
            <li class="list-group-item">Color: {{ item.color }}</li>
            <li class="list-group-item">Price: {{ item.price }}</li>
            <li class="list-group-item">Quantity: {{ item.quantity }}</li>
        </ul>
    </div>
    <br>
{% endblock %}


single_item.html:

{% extends 'base.html' %}

{% block content %}
    <div class="card" style="width: 18rem;">
        <div class="card-header">
            <b>{{ item.name }}</b>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Description: {{ item.description }}</li>
            <li class="list-group-item">Size: {{ item.size }}</li>
            <li class="list-group-item">Type: {{ item.type }}</li>
            <li class="list-group-item">Color: {{ item.color }}</li>
            <li class="list-group-item">Price: {{ item.price }}</li>
            <li class="list-group-item">Quantity: {{ item.quantity }}</li>
        </ul>
    </div>
    <br>
{% endblock %}

admin.py:
from django.contrib import admin
from .models import *

# Register your models here.
admin.site.register(Color)
admin.site.register(Type)
admin.site.register(Item)

